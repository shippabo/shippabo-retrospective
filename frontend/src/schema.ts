/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/session": {
    /** @description Create a new session */
    post: {
      /** @description Create a new session */
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateSession"];
        };
      };
      responses: {
        /** @description Return a 200 status to indicate that session was created */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}": {
    /** @description Get a session */
    get: {
      /** @description Get a session */
      parameters: {
          /** @description Session ID */
        path: {
          sessionId: number;
        };
      };
      responses: {
        /** @description Return a 200 status to indicate that session was created */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}/users": {
    /** @description List users in a session */
    get: {
      /** @description List users in a session */
      parameters: {
          /** @description Session ID */
        path: {
          sessionId: number;
        };
      };
      responses: {
        /** @description Return a 200 status to indicate request was successful */
        200: {
          content: {
            "application/json": (components["schemas"]["User"])[];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}/activities": {
    /** @description List activities in a session */
    get: {
      /** @description List activities in a session */
      parameters: {
          /** @description Session ID */
        path: {
          sessionId: number;
        };
      };
      responses: {
        /** @description Return a 200 status to indicate request was successful */
        200: {
          content: {
            "application/json": (components["schemas"]["Activity"])[];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}/user/{userId}/start": {
    /** @description Start a session */
    post: {
      /** @description Start a session */
      parameters: {
          /** @description Session ID */
          /** @description User ID */
        path: {
          sessionId: number;
          userId: number;
        };
      };
      responses: {
        /** @description Return a 200 status to indicate that session was started */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}/join": {
    /** @description Join a session */
    post: {
      /** @description Join a session */
      parameters: {
          /** @description Session ID */
        path: {
          sessionId: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["JoinSession"];
        };
      };
      responses: {
        /** @description Return a 200 status to indicate that session was joined */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
  "/session/{sessionId}/user/{userId}/stop": {
    /** @description Stop a session */
    post: {
      /** @description Stop a session */
      parameters: {
          /** @description Session ID */
          /** @description User ID */
        path: {
          sessionId: number;
          userId: number;
        };
      };
      responses: {
        /** @description Return a 200 status to indicate that session was stopped */
        200: {
          content: {
            "application/json": components["schemas"]["Session"];
          };
        };
        404: components["responses"]["NotFoundError"];
        422: components["responses"]["ValidationError"];
        500: components["responses"]["ServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ValidationError: {
      message: string;
    };
    NotFoundError: {
      message: string;
    };
    Activity: {
      id: number;
      event: string;
      eventAt: string;
      sessionId: number;
    };
    User: {
      id: number;
      name: string;
      order: number;
      isHost: boolean;
      createdAt: string;
      updatedAt: string;
      sessionId: number;
    };
    CreateSession: {
      sessionName: string;
      userName: string;
    };
    JoinSession: {
      userName: string;
    };
    Session: {
      id: number;
      name: string;
      startedAt?: string;
      stoppedAt?: string;
      createdAt: string;
      updatedAt: string;
    };
  };
  responses: {
    /** @description Validation error */
    ValidationError: {
      content: {
        "application/json": components["schemas"]["ValidationError"];
      };
    };
    /** @description Not found error */
    NotFoundError: {
      content: {
        "application/json": components["schemas"]["NotFoundError"];
      };
    };
    /** @description Internal server error */
    ServerError: never;
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export type operations = Record<string, never>;
